version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: arb-postgres
    environment:
      POSTGRES_USER: arbitrage_user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: arbitrage_bot
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - arbitrage-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arbitrage"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and nonce management
  redis:
    image: redis:7-alpine
    container_name: arb-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - arbitrage-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: arb-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - arbitrage-network
    depends_on:
      - postgres
      - redis

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: arb-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - arbitrage-network
    depends_on:
      - prometheus

  # Arbitrage Bot (uncomment when ready to run in Docker)
  # arbitrage-bot:
  #   build: .
  #   container_name: arb-bot
  #   env_file:
  #     - .env
  #   environment:
  #     - ACCOUNTING_DB_URL=postgresql://arbitrage:${DB_PASSWORD:-changeme}@postgres:5432/polygon_arbitrage
  #     - REDIS_URL=redis://redis:6379
  #     - NODE_ENV=production
  #   volumes:
  #     - ./logs:/app/logs
  #   networks:
  #     - arbitrage-network
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  arbitrage-network:
    driver: bridge
